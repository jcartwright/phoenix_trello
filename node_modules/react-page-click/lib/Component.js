'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactPageClick = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ReactComponentWithPureRenderMixin = require('react/lib/ReactComponentWithPureRenderMixin');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_MOVE = 20;

var extractCoordinates = function extractCoordinates(_ref) {
  var changedTouches = _ref.changedTouches;
  return { x: changedTouches[0].screenX, y: changedTouches[0].screenY };
};

var ReactPageClick = exports.ReactPageClick = _react2.default.createClass({
  displayName: 'ReactPageClick',

  propTypes: {
    children: _react2.default.PropTypes.node.isRequired,
    notify: _react2.default.PropTypes.func.isRequired,
    onMouseDown: _react2.default.PropTypes.func,
    onTouchStart: _react2.default.PropTypes.func,
    outsideOnly: _react2.default.PropTypes.bool,
    notifyOnTouchEnd: _react2.default.PropTypes.bool
  },

  getDefaultProps: function getDefaultProps() {
    return {
      outsideOnly: true,
      notifyOnTouchEnd: false
    };
  },
  componentWillMount: function componentWillMount() {
    this.insideClick = false;
    this.touchStart = null;
  },
  componentDidMount: function componentDidMount() {
    global.window.addEventListener('mousedown', this.onDocumentMouseDown, false);
    global.window.addEventListener('mouseup', this.onDocumentMouseUp, false);
    global.window.addEventListener('touchstart', this.onDocumentTouchStart, false);
    global.window.addEventListener('touchend', this.onDocumentTouchEnd, false);
  },


  shouldComponentUpdate: _ReactComponentWithPureRenderMixin.shouldComponentUpdate,

  componentWillUnmount: function componentWillUnmount() {
    global.window.removeEventListener('mousedown', this.onDocumentMouseDown, false);
    global.window.removeEventListener('mouseup', this.onDocumentMouseUp, false);
    global.window.removeEventListener('touchstart', this.onDocumentTouchStart, false);
    global.window.removeEventListener('touchend', this.onDocumentTouchEnd, false);
  },
  onDocumentMouseDown: function onDocumentMouseDown() {
    var _props;

    if (this.insideClick) {
      return;
    }
    (_props = this.props).notify.apply(_props, arguments);
  },
  onDocumentMouseUp: function onDocumentMouseUp() {
    this.insideClick = false;
  },
  onDocumentTouchStart: function onDocumentTouchStart(event) {
    if (this.insideClick) {
      return;
    }
    if (this.props.notifyOnTouchEnd) {
      this.touchStart = extractCoordinates(event);
    } else {
      var _props2;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_props2 = this.props).notify.apply(_props2, [event].concat(args));
    }
  },
  onDocumentTouchEnd: function onDocumentTouchEnd(event) {
    // on mobile safari click events are not bubbled up to the document unless the target has the
    // css `cursor: pointer;` http://www.quirksmode.org/blog/archives/2010/10/click_event_del_1.html
    // so try and work out if we should call the notify prop
    if (this.props.notifyOnTouchEnd && this.touchStart && !this.insideClick) {
      var _extractCoordinates = extractCoordinates(event);

      var x = _extractCoordinates.x;
      var y = _extractCoordinates.y;

      var dx = Math.abs(x - this.touchStart.x);
      var dy = Math.abs(y - this.touchStart.y);

      if (dx < MAX_MOVE && dy < MAX_MOVE) {
        var _props3;

        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }

        (_props3 = this.props).notify.apply(_props3, [event].concat(args));
      }
    }
    this.touchStart = null;
    this.insideClick = false;
  },
  onMouseDown: function onMouseDown() {
    this.insideClick = true;
    if (this.props.onMouseDown) {
      var _props4;

      (_props4 = this.props).onMouseDown.apply(_props4, arguments);
    }
  },
  onTouchStart: function onTouchStart() {
    this.insideClick = true;
    if (this.props.onTouchStart) {
      var _props5;

      (_props5 = this.props).onTouchStart.apply(_props5, arguments);
    }
  },
  render: function render() {
    var props = this.props.outsideOnly ? {
      onMouseDown: this.onMouseDown,
      onTouchStart: this.onTouchStart
    } : {};

    return _react2.default.cloneElement(_react2.default.Children.only(this.props.children), props);
  }
});
//# sourceMappingURL=Component.js.map